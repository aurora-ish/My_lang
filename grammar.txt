expr   : KEYWORD:wish IDENTIFIER EQ expr
       : comp_expr((KEYWORD: alsoo, or)comp_expr)
comp_expr: nuhuh comp_expr
       : arith_expr((EE|LT|GT|LTE|GTE)arith_expr)
arith_expr: term((plus|minus)term)*


term : factor((mul|div)factor)*

factor :(plus|minus)factor
       :power

power: atom(POW factor)*

call:  atom(lparen  (expr(COMMA expr)*)? rparen)?

atom   : int|float|IDENTIFIER|STRING
       : lparen expr rparen
       : list-expr
       :if-expr
       :for-expr
       :while-expr
       :func-def

list-expr: LSQUARE | RSQAURE

       
if-xpr : KEYWORD:if expr KEYWORD:then expr 
       : KEYWORD:elif expr KEYWORD:then expr KEYWORD:else expr
       :KEYWORD:else expr

for-expr: KEYWORD: for IDENTIFIER EQ expr KEYWORD:to expr
          (KEYWORD:step expr)? KEYWORD:then expr

while-expr: KEYWORD:while expr KEYWORD:then expr

func-def: KEYWORD fun IDENTIFIER?
              lparen(IDENTIFIE(COMMA IDENTIFIER)*)? rparen
              ARROW expr


expr() → comp_expr() (assignment) → arith_expr() (addition/subtraction) → term()



